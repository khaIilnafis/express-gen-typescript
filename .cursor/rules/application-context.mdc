---
description: This rule provides context to the application, its structure, architecture, and purpose.
globs: ./**/**/*
alwaysApply: true
---
 # Application Context

## Overview
This is an Express Generator for TypeScript applications. It generates a complete Express.js application with TypeScript configured from the start. The generator allows customization through both an interactive CLI and a configuration-driven approach, helping developers scaffold new Express.js applications with various features and configurations.

## Architecture
The project follows a spec-based architecture with these key components:

1. **Specs**: Define what needs to be generated, creating a clear representation of user choices
2. **Presets**: Define the configurations for generation based on specs
3. **Generators**: Use specs and presets to generate the actual code
4. **Builders**: Utility functions that convert configurations into actual AST nodes

## Execution Flow
The generator's execution follows this pattern:

1. **User Input**: Collect inputs via CLI args or interactive prompts (in `bin/cli.ts` & `lib/prompt.ts`)
2. **Spec Creation**: Convert user options into standardized spec objects (`lib/specs/factory.ts`)
3. **Preset Selection**: Use specs to determine which presets to apply (`lib/presets/factory.ts`)
4. **Code Generation**: Pass specs and presets to generators that create AST using builders
5. **File Output**: Write the generated code to the appropriate files

## Component Locations
- **CLI Entry Point**: Located in `bin/cli.ts`
- **User Prompts**: Managed through `lib/prompt.ts`
- **Specs**: Located in `lib/specs/`
  - Base specs: `lib/specs/types.ts`
  - Component-specific specs: `lib/specs/server.ts`, etc.
  - Factory for creating specs: `lib/specs/factory.ts`
- **Presets**: Located in `lib/presets/`
  - Component-specific presets: `lib/presets/server.ts`, etc.
  - Factory for creating presets: `lib/presets/factory.ts`
- **Generators**: Located in `lib/generators/`
  - Each component has its own directory: `server/`, `database/`, etc.
  - Generators implement the code generation logic
- **Builders**: Located in `lib/utils/builders/`
  - AST node creation utilities

## Generator Structure
Each major component (server, database, etc.) follows a standard structure:

```
/generators/<component>
  /index.ts                     # Entry point & exports
  /generator.ts                 # Main generator implementation
  /...                          # Additional functionality
```

## Main Functionality
- **Project Scaffolding**: Generates a complete Express.js application with TypeScript
- **Interactive Configuration**: Prompts users for project options
- **Feature Selection**: Allows choosing databases, authentication, websockets, and view engines
- **Code Generation**: Creates properly structured TypeScript files based on specs and presets

## Usage Modes
- **CLI Mode**: Users run the generator and answer interactive prompts to configure their application
- **Configuration Mode**: Users provide a preset configuration file to generate an application with predefined settings
- **Library Mode**: Developers can use the generator as a library, programmatically creating applications

## Extension Patterns
To add a new feature (e.g., a new database type), contributors should:
1. Create a new spec type in the appropriate spec file
2. Add factory methods to create the spec from user options
3. Create presets for the new feature
4. Implement a generator that uses the spec and presets
5. Update the main execution flow to include the new feature

## Relationship Between Components
- **Specs** describe *what* needs to be generated (e.g., "a server with these properties")
- **Presets** define *how* it should be configured (e.g., "use these imports, methods, etc.")
- **Generators** handle *where* and *when* the code is created
- **Builders** create the actual AST nodes that represent the code

This architecture separates concerns and makes it easier to extend the generator without needing to understand the AST details.